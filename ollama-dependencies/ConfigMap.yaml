apiVersion: v1
kind: ConfigMap
metadata:
  name: ollama-init-script-configmap
  namespace: ollama
data:
  init-script.sh: |
    #!/bin/sh
    set -o allexport
    . /tmp/env_vars
    set +o allexport

    MAX_RETRIES=30
    RETRY_DELAY=10
    URL_PREFIX="https://10.0.0.4:443/api/v2.0"
    KUBERNETES_API="https://kubernetes.default.svc"
    TOKEN_PATH="/var/run/secrets/kubernetes.io/serviceaccount/token"
    CA_CERT_PATH="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    NAMESPACE_PATH="/var/run/secrets/kubernetes.io/serviceaccount/namespace"

    if [ ! -f "$TOKEN_PATH" ] || [ ! -f "$CA_CERT_PATH" ]; then
        echo "Error: Missing Kubernetes service account credentials or CA certificate."
        exit 1
    fi

    TOKEN=$(cat "$TOKEN_PATH")
    NAMESPACE=$(cat "$NAMESPACE_PATH")

    log() {
        echo "$(date +"%Y-%m-%d %H:%M:%S") - $1"
    }

    check_response_for_401() {
        local response="$1"
        if echo "$response" | grep -q "HTTP/1.1 401"; then
            log "Error: Received 401 Unauthorized response."
            exit 1
        fi
    }

    retry_command() {
        local attempt=0
        local exit_code=0
        local response_file=$(mktemp)

        until [ $attempt -ge $MAX_RETRIES ]; do
            "$@" > "$response_file" 2>&1
            exit_code=$?
            if [ $exit_code -eq 0 ]; then
                log "Attempt $((attempt + 1)) succeeded."
                log "Response:"
                cat "$response_file" | sed 's/^/  /'
                check_response_for_401 "$(cat "$response_file")"
                rm -f "$response_file"
                return 0
            fi

            log "Attempt $((attempt + 1))/$MAX_RETRIES failed with exit code $exit_code. Retrying in $RETRY_DELAY seconds..."
            log "Response from failed attempt:"
            cat "$response_file" | sed 's/^/  /'
            check_response_for_401 "$(cat "$response_file")"
            attempt=$((attempt + 1))
            sleep $RETRY_DELAY
        done

        log "All $MAX_RETRIES attempts failed."
        rm -f "$response_file"
        return $exit_code
    }

    check_kubeapi_availability() {
        log "Checking Kubernetes API availability..."
        retry_command curl --include --insecure --silent --fail --cacert "$CA_CERT_PATH" -H "Authorization: Bearer $TOKEN" "$KUBERNETES_API/version"
    }

    get_secret_value() {
        local field=$1
        retry_command kubectl --server="$KUBERNETES_API" --token="$TOKEN" --certificate-authority="$CA_CERT_PATH" get secret fortiweb-login-secret -o jsonpath="{.data.$field}" | base64 -d
    }

    perform_request() {
        local method=$1
        local endpoint=$2
        shift 2

        local url="${URL_PREFIX}${endpoint}"
        local response_file=$(mktemp)

        response=$(curl --include --insecure --silent --fail --cacert "$CA_CERT_PATH" \
            -H "Authorization: Bearer $TOKEN" \
            -X "$method" \
            "$url" "$@" 2>&1)

        check_response_for_401 "$response"

        echo "$response"
    }

    log "Starting script..."

    check_kubeapi_availability

    log "Fetching credentials from secret..."
    USERNAME=$(get_secret_value username)
    PASSWORD=$(get_secret_value password)

    if [ -z "$USERNAME" ] || [ -z "$PASSWORD" ]; then
        log "Error: Could not retrieve username or password from the secret."
        exit 1
    fi

    log "Successfully retrieved credentials. Generating token..."
    TOKEN=$(echo "{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\",\"vdom\":\"root\"}" | base64 | tr -d "\\n")

    log "Uploading OpenAPI schema file..."
    perform_request "POST" "/waf/openapi.openapischemafile" \
        -H "Content-Type: multipart/form-data" \
        -F "openapifile=@/files/openapi.yaml"

    log "Creating OpenAPI validation policy..."
    perform_request "POST" "/cmdb/waf/openapi-validation-policy" \
        -H "Content-Type: application/json" \
        --data-binary '{"data":{"q_type":1,"name":"ollama","action":"alert","action_val":"2","block-period":600,"severity":"Low","severity_val":"3","trigger":"","trigger_val":"0","sz_schema-file":-1}}'

    log "Script completed successfully."
